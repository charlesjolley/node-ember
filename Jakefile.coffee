PATH = require 'path'
FS   = require 'fs'
JAKE = jake

VENDOR_PATH         = PATH.resolve __dirname, 'vendor'
VENDOR_EMBER        = PATH.resolve VENDOR_PATH, 'ember'
NEEDS_REAL_WINDOW   = ['metamorph']
NEEDS_GLOBAL_WINDOW = ['ember-metal', 'ember-debug']
CONVOY_VERSION      = '~0.3'

npmVersion = (version) ->
  version.replace /^([^\d]*\d+\.\d+\.\d+)\.(.*)$/, '$1-$2'

desc "builds ember files and package.json for this package from source"
task 'dist', ['vendor:update', 'vendor:dist'], ->
  console.log 'Generating NPM package...'
  packageRoot = __dirname
  externalDependencies = {}
  dependencySources   = {}
  basePackageJSON     = null

  moduleRoot  = PATH.resolve VENDOR_EMBER, 'dist', 'modules'
  moduleNames = FS.readdirSync(moduleRoot).map (filename) ->
    return null if filename == 'handlebars.js' # uses external version
    PATH.basename filename, '.js'

  moduleNames.forEach (moduleName) ->
    return if !moduleName

    sourcePath = PATH.resolve moduleRoot, "#{moduleName}.js"
    console.log "  writing #{moduleName}"

    packageJSON = PATH.resolve VENDOR_EMBER,'packages',moduleName,'package.json'
    packageJSON = JSON.parse FS.readFileSync(packageJSON, 'utf8')
    dependencies = packageJSON.dependencies || {}

    # save for updating our final package.json
    basePackageJSON = packageJSON if moduleName == 'ember'

    outputBody = [
      '//',
      '// This file is automatically generated. any changes will be lost',
      '//',
      ''
    ]

    if NEEDS_REAL_WINDOW.indexOf(moduleName)>=0 or dependencies.jquery
      outputBody.push 'require("window");'
      # TODO: convert to published package when ready
      externalDependencies.window = 
        'git://github.com/charlesjolley/node-window.git#master'

    for packageName, packageVersion of dependencies
      continue if packageName == 'spade' # not needed for node-land
      if moduleNames.indexOf(packageName) >= 0
        outputBody.push "require(\"./#{packageName}\");"
      else
        outputBody.push switch packageName
          when 'handlebars'
            'var Handlebars = require("handlebars");'
          when 'jquery'
            'var jQuery, $; jQuery = $ = require("jquery");'
          else
            "require(\"#{packageName}\");"

        packageVersion = npmVersion packageVersion
        unless externalDependencies[packageName] == packageVersion
          if externalDependencies[packageName]
            fail """
              ERROR: Multiple versions detected for external dependency
              "#{packageName}". (#{packageVersion} required by #{moduleName}
              vs #{externalDependencies[packageName]} required by 
              #{dependencySources[packageName]}.
              """
          externalDependencies[packageName] = packageVersion
          dependencySources[packageName] = moduleName # for debug info only

    outputBody.push "\n"

    sourceBody = FS.readFileSync sourcePath, 'utf8'
    if NEEDS_GLOBAL_WINDOW.indexOf(moduleName)>=0
      outputBody.push '(function(window) {'
      outputBody.push sourceBody
      outputBody.push '})(this);'
    else
      outputBody.push sourceBody

    outputBody = outputBody.join "\n"

    # ./module_name.js
    outputPath = PATH.resolve __dirname, "#{moduleName}.js"
    FS.writeFileSync outputPath, outputBody

  console.log "  generating package.json"
  packageJSON = {}
  throw new Error("ember package.json not found") unless basePackageJSON
  'name summary description homepage author'.split(' ').forEach (key) ->
    packageJSON[key] = basePackageJSON[key]

  packageJSON.version = npmVersion basePackageJSON.version

  externalDependencies.convoy = CONVOY_VERSION
  packageJSON.dependencies = externalDependencies
  packageJSON.main = './ember.js'
  packageJSON.repository =
    type: 'git'
    url:  'git://github.com/charlesjolley/node-ember.git'

  FS.writeFileSync PATH.resolve(__dirname, 'package.json'),
    JSON.stringify packageJSON, null, 2

  console.log 'Done.'


namespace 'vendor', ->

  desc "Configures the vendor directory. Call first time before build"
  task 'setup', (->
    console.log 'preparing vendor for building'
    jake.exec [
      "git submodule update --init"
      "bundle install --gemfile #{PATH.resolve VENDOR_EMBER, 'Gemfile'}"
    ], (() -> console.log 'Done.'; complete() ), { stdout: true, stderr: true }
  ), async: true

  desc "Updates vendor directory to latest version"
  task 'update', (->
    console.log 'updating to latest ember'
    jake.exec ['git submodule update'], (() ->
      console.log 'Done.'
      complete()
    ), stdout: true
  ), async: true

  desc "Builds ember files inside of vendor. Invoked before main dist"
  task 'dist', (->
    console.log 'Build distribution in vendor...'
    jake.exec ["cd #{VENDOR_EMBER}; rake dist --trace"], (() ->
      console.log 'Done.'
      complete()
    ), { stdout: true, stderr: true }
  ), async: true
